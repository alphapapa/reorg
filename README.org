* /Re/​organize your life
Dynamically, recursively, and intelligently reorganize any data set into an outline based on custom templates.

Recursively group, sort, format, view, edit, and sync changes to underlying data.

Customize the data displayed in each heading and the shortcuts to interact with it

Display the same data outline locations, i.e., clones

Dynamically update the outline 

Remotely edit the source files

Plugin system to work with new types of data. 

I originally designed an org-mode tree view. Imagine a combination of org-super-agenda, org-ql, and taxy.el. 

But it is not limited to org-mode. You can use Reorg to display, and interact with, /any/ kind of data.
** Quick example: Orgmode 
*** Instructions
*** Load the template 
*** Basic navigation 
*** Viewing buffer 
*** View as side window 
*** About the bullets
** Not just for orgmode: use it with files, emails, source code, or anything


Reorg provides a pair of macros to create new parsers, customize data display, and create keyboard shortcuts. One created, the full power 

*** Files
*** Source code
*** Emails
*** Custom file formats (e.g., Leo Editor)
 
** How to write a template
*** Dot-notation and let-alist
*** :source 
**** Inherited: t
*** :group
**** Multivalued data types: .@notation 
*** :sort-groups
**** Inherited: nil 
*** :sort-results
**** Inherited: t
*** :format-results 
**** Inherited: t
**** Special properties 
*** Hacking backdoors 
**** :overrides and :post-overrides
*** Help from company-reorg 
** Example 
Imagine an orgmode file:
#+begin_src org :results silent 
  ,* Jack :tag1:
  DEADLINE: <2021-10-12 Tue>
  ,* Justin :tag2:
  DEADLINE: <2021-10-26 Tue>
  ,* Alice :tag1:
  DEADLINE: <2021-10-12 Tue>
  ,* Alabaster :tag2:
  DEADLINE: <2021-10-08 Fri>
#+end_src

You want to group them like this:
#+begin_src org :results silent
  ,* “MY CUSTOM HEADING”
  ,** headline text (in alphabetical order)
  ,*** tag (unsorted)
  (with results sorted by deadline, earliest first)
#+end_src
#+begin_src emacs-lisp :results silent
  '( :group "MY CUSTOM HEADING"
     :children (( :group (lambda (x) (plist-get x :headline-only))
                  :children (( :group (lambda (x) (plist-get x :tag-string))
                               :sort-results (lambda (x) (plist-get x :tag-string)))))))
#+end_src
This will produce:
#+begin_src org :results silent 
  #+end_src
| keyword       | description        | elisp                                                                 |
|---------------+--------------------+-----------------------------------------------------------------------|
| :group        | Function or string | A function accepting one argument, the plist of the heading at point. |
| :children     | more groups        | the children keyword is followed by a new group                       |
| :sort         | Sort the groups    | A function that accepts two arguments and returns the first           |
| :sort-results | Sort the results   | A function that accepts two arguments and returns the first           |
There are a lot of other features of the grouping sorting function. See the source code.

The grouped and sorted results are translated into an outline and displayed in a side buffer. 
** Step 4. Using the outline
**** Navigation 
***** headings
***** clones 
**** Editing fields
** Capturing data into the outline: org-capture as an example 
** How to write a plugin 
*** Creating a class 
**** Writing a getter 
**** Writing a display function 
*** Creating keyboard shortcuts 
*** Creating data types
**** Writing a parser 
***** Referencing previously parsed data 
***** Receiving data by side-effect vs. passing 
**** Writing a display function (optional)
*** 
** Planned 
CLOSED: [2023-01-10 Tue 21:28]
*** Changing views on the fly
:PROPERTIES:
:ID:       0a8b0883-2b86-4db0-bb50-f3ef9778ab3f
:END:
**** Hoisting headings 
**** Inverting the outline
**** Infinite outlines 
:PROPERTIES:
:ID:       50bb18ae-ba60-4a8f-8395-51870e377b35
:END:

